"""Create Celery task meta tables

Revision ID: 87905dd45049
Revises: 52f091d02453
Create Date: 2024-12-07 01:22:46.619323+01:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import oracle

# revision identifiers, used by Alembic.
revision: str = '87905dd45049'
down_revision: Union[str, None] = '52f091d02453'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'celery_taskmeta',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('task_id', sa.String(length=155), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=True),
        sa.Column('result', sa.PickleType(), nullable=True),
        sa.Column('date_done', sa.DateTime(), nullable=True),
        sa.Column('traceback', sa.Text(), nullable=True),
        sa.Column('name', sa.String(length=155), nullable=True),
        sa.Column('args', sa.LargeBinary(), nullable=True),
        sa.Column('kwargs', sa.LargeBinary(), nullable=True),
        sa.Column('worker', sa.String(length=155), nullable=True),
        sa.Column('retries', sa.Integer(), nullable=True),
        sa.Column('queue', sa.String(length=155), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('task_id'),
        sqlite_autoincrement=True
    )
    op.create_table(
        'celery_tasksetmeta',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('taskset_id', sa.String(length=155), nullable=True),
        sa.Column('result', sa.PickleType(), nullable=True),
        sa.Column('date_done', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('taskset_id'),
        sqlite_autoincrement=True
    )


def downgrade() -> None:
    op.drop_table('celery_tasksetmeta')
    op.drop_table('celery_taskmeta')
